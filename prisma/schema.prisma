// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Service {
  id            String  @id @default(uuid())
  title         String // Default title, could be one language or a fallback
  titleEn       String? // Title in English
  titleFi       String? // Title in Finnish
  description   String? // Default description
  descriptionEn String? // Description in English
  descriptionFi String? // Description in Finnish
  duration      Int // Duration in minutes
  price         Float // Price of the service
  currency      String  @default("EUR") // Currency code
  color         String? // Color hex code for the service in UI
  active        Boolean @default(true) // Whether the service is currently offered
  order         Int? // Optional ordering for display

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Booking   Booking[]
}

// Model for regular weekly availability
model RegularHours {
  id          String  @id @default(uuid())
  dayOfWeek   Int // 0 = Sunday, 1 = Monday, ..., 6 = Saturday
  startTime   String // Time in HH:MM:SS format (local time)
  endTime     String // Time in HH:MM:SS format (local time)
  isAvailable Boolean @default(true)

  @@unique([dayOfWeek]) // Ensure only one entry per day of the week
}

// Model for specific date overrides or additions to availability
model SpecialDate {
  id          String  @id @default(uuid())
  date        String // Date in YYYY-MM-DD format
  startTime   String // Time in HH:MM:SS format (local time)
  endTime     String // Time in HH:MM:SS format (local time)
  isAvailable Boolean @default(true)

  @@unique([date]) // Ensure only one entry per specific date
}

// Model for blocking out entire dates
model BlockedDate {
  id     String  @id @default(uuid())
  date   String // Date in YYYY-MM-DD format
  reason String? // Optional reason for blocking

  @@unique([date]) // Ensure only one entry per blocked date
}

// Model for Bookings
model Booking {
  id             String   @id @default(uuid())
  serviceId      String
  startTime      DateTime
  endTime        DateTime
  customerName   String
  customerEmail  String
  customerPhone  String?
  language       String   @default("fi")
  notes          String?
  status         String   @default("confirmed") // e.g., confirmed, cancelled, pending_payment
  cancellationId String?  @unique // Unique ID for public cancellation link

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to Service
  service Service @relation(fields: [serviceId], references: [id])
}
